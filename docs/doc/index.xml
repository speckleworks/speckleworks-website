<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Doc-rss on Speckle: Open Data Rich Design</title>
    <link>https://speckle.works/doc/index.xml</link>
    <description>Recent content in Doc-rss on Speckle: Open Data Rich Design</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Oct 2017 13:08:41 +0100</lastBuildDate>
    <atom:link href="https://speckle.works/doc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>SpeckleCore (.NET) in Grashopper</title>
      <link>https://speckle.works/doc/specklehacks/</link>
      <pubDate>Wed, 04 Oct 2017 13:08:41 +0100</pubDate>
      
      <guid>https://speckle.works/doc/specklehacks/</guid>
      <description>

&lt;p&gt;You can easily hack your own Speckle Components with the SpeckleCore BaseSpeckleApiClient class. Here are some really quick scripts I&amp;rsquo;ve hacked up together in a c# scripting component.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s a nice easy way of exploring the API, albeit you pay the price of fiddling around Grasshopper&amp;rsquo;s event loop (or lack thereof).&lt;/p&gt;

&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;Make sure you&amp;rsquo;ve installed the &lt;a href=&#34;https://github.com/speckleworks/SpeckleGrasshopper/releases&#34;&gt;Speckle Grasshopper Components&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Create a C#/VBÂ Scripting Component in Grasshopper.&lt;/li&gt;
&lt;li&gt;Right Click, select &amp;ldquo;Manage Assemblies&amp;rdquo; and add the SpeckleCore.dll and SpeckleRhinoConverter.dll if needed.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you get stuck, &lt;a href=&#34;https://speckle.works/img/blobs/SpeckleCore.Hacks.gh&#34;&gt;here is the grasshopper defintion!&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Please note that you might need to set the &amp;ldquo;Managed Assemblies&amp;rdquo; of the scripting components, and don&amp;rsquo;t forget to use your email and password that &lt;strong&gt;you have already registered with&lt;/strong&gt; on the speckle server of your choice.&lt;/p&gt;

&lt;h2 id=&#34;a-note-on-async-and-sync&#34;&gt;A note on Async and Sync&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;SpeckleCore&lt;/strong&gt;&amp;rsquo;s methods come in two falvours, &lt;em&gt;Sync&lt;/em&gt; and &lt;em&gt;Async&lt;/em&gt;. I will not go into details here, but if you don&amp;rsquo;t want the UI stuck, you&amp;rsquo;ll need to invoke off the main thread.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve ended up invoking them using either
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Rhino.RhinoApp.Invoke(&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Action(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;response&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient.DoSomethingSync()&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

or:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient.DoSomethingAsync.ContinueWith(&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;taskResult&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;//...&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;You play.&lt;/p&gt;

&lt;h2 id=&#34;login&#34;&gt;Login&lt;/h2&gt;

&lt;p&gt;This script will send a login request to the server and return with you api token. It will also set the AuthToken field in the provided client, and output it too (so you can reuse it afterwards in the definiton without authenticating everytime).&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;RunScript&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Client,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Email,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Response,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ClientOut)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseSpeckleApiClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Client&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseSpeckleApiClient;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Output stuff first, as we might return from the actual method and not get to the bottom&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;Response&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// If the response is not null, set the AuthToken value of the client and output it as well&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(myResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient.AuthToken&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse.ApiToken;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;ClientOut&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// check if we really need to invoke a new login:&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// 1) Are the inputs there?&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// 2) Are the inputs different than the last ones?&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;((Email&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(_Email&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Email&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_Password&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password))&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #75715e&#34;&gt;// Store the inputs so we can compare new vs. old&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;_Email&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Email;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_Password&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password;&lt;/span&gt;

      &lt;span style=&#34;color: #75715e&#34;&gt;// Invoke the method from outside the main thread&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;Rhino.RhinoApp.MainApplicationWindow.Invoke(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Action(()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// store the response&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient.UserLogin(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PayloadAccountLogin()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Email&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Email,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Password&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// trigger a component refresh&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.Component.ExpireSolution(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}));&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// &amp;lt;Custom additional code&amp;gt; &lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;ResponseAccountLogin&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_Email,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_Password;&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// &amp;lt;/Custom additional code&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;create-object&#34;&gt;Create Object&lt;/h2&gt;

&lt;p&gt;This script will take a GeometryBase object, convert it, and save it in the database. It will then output the saved SpeckleObject, complete with his &lt;strong&gt;DatabaseId&lt;/strong&gt; (called &lt;em&gt;ObjectId&lt;/em&gt; in the response).&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;RunScript&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Client,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;GeometryBase&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Obj,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Response,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpkObject)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// set output first&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;Response&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpkObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObject;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Get and cast the client&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseSpeckleApiClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Client&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseSpeckleApiClient;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Return if null&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(myClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Create a fresh converter if we don&amp;#39;t have one&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RhinoConverter();&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Exit if no object to send to the db&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(Obj&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Convert the object&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter.ToSpeckle(Obj);&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Check if we have a new object&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(myObject.Hash&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_myObject.Hash)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;Rhino.RhinoApp.MainApplicationWindow.Invoke(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Action(()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// Create a payload and put in the converted object&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;PayloadSingleObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myPayload&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PayloadSingleObject()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient.ObjectCreate(myPayload);&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// Set the database id to the converted object&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObject.DatabaseId&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse.ObjectId;&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// Save the old object so we can compare upstairs&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;_myObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObject;&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.Component.ExpireSolution(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}));&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// &amp;lt;Custom additional code&amp;gt; &lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;RhinoConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpeckleObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;ResponsePostObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpeckleObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_myObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpeckleObject()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Hash&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;
  &lt;span style=&#34;color: #75715e&#34;&gt;// &amp;lt;/Custom additional code&amp;gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;create-many-objects&#34;&gt;Create Many Objects&lt;/h2&gt;

&lt;p&gt;Slightly different, and introduces the complexity of understanding if we actually have a new request or not.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;  &lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;RunScript&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Client,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;List&amp;lt;GeometryBase&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Objs,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Response,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpkObjects)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// set output first&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;Response&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpkObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObjects;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Get and cast the client&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseSpeckleApiClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Client&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseSpeckleApiClient;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Return if null&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(myClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Create a fresh converter if we don&amp;#39;t have one&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RhinoConverter();&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Exit if no object to send to the db&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(Objs&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Objs.Count&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Convert the object&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter.ToSpeckle(Objs).ToList();&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Calculate a hash for the request&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bigHash&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObjects.ForEach(obj&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;bigHash&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;obj.Hash);&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;requestHash&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CreateMD5(bigHash);&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Check if we have a new request.&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// Note: this is not a good way of doing it; the grasshopper sender&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// component takes care of this by doing a diff on the list, and implements&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// a cache too, so that previously sent objects do not get sent again.&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(requestHash&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_requestHash)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #75715e&#34;&gt;// Create a payload and put in the converted objects&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;PayloadMultipleObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myPayload&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PayloadMultipleObjects()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Objects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

      &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient.ObjectCreateBulkAsync(myPayload).ContinueWith(tres&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tres.Result;&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// Set the database id to the converted objects&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;k&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse.Objects.ForEach(id&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObjects[k++].DatabaseId&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;id;&lt;/span&gt;
          &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// Save the request hash&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;_requestHash&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;requestHash;&lt;/span&gt;

        &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.Component.ExpireSolution(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// &amp;lt;Custom additional code&amp;gt; &lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;RhinoConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;List&amp;lt;SpeckleObject&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_requestHash&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;ResponsePostObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;


  &lt;span style=&#34;color: #75715e&#34;&gt;// ref: https://msdn.microsoft.com/en-us/library/system.security.cryptography.md5%28v=vs.110%29.aspx&lt;/span&gt;
  &lt;span style=&#34;color: #66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;CreateMD5&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;input)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// Use input string to calculate MD5 hash&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;using&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(System.Security.Cryptography.MD5&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;md5&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Security.Cryptography.MD5.Create())&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;inputBytes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Text.Encoding.ASCII.GetBytes(input);&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashBytes&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;md5.ComputeHash(inputBytes);&lt;/span&gt;

      &lt;span style=&#34;color: #75715e&#34;&gt;// Convert the byte array to hexadecimal string&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Text.StringBuilder&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sb&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;System.Text.StringBuilder();&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hashBytes.Length;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;i++)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;sb.Append(hashBytes[i].ToString(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;X2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;));&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;sb.ToString();&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// &amp;lt;/Custom additional code&amp;gt; &lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;get-object&#34;&gt;Get Object&lt;/h2&gt;

&lt;p&gt;Gets a Speckle Object by its database id.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;RunScript&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Client,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ObjectId,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Response,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpkObject,&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;ref&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;object&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RhObject)&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// Get and cast the client&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseSpeckleApiClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Client&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseSpeckleApiClient;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Create a fresh converter if we don&amp;#39;t have one&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RhinoConverter();&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Set outputs&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;Response&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpkObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObject;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(myObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RhObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter.ToNative(myObject);&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Check if we have a new request&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(ObjectId&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_ObjectId)&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;Rhino.RhinoApp.MainApplicationWindow.Invoke(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Action(()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;_ObjectId&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ObjectId;&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;// Note: Since this is Rhino, we can omit the &amp;#39;displayValue&amp;#39; field for&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;// any objects we get back, as the converter relies on the encoded value.&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient.ObjectGet(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;omit=displayValue&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ObjectId);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse.SpeckleObject;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.Component.ExpireSolution(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}));&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// &amp;lt;Custom additional code&amp;gt; &lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;RhinoConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpeckleObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObject&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;ResponseObjectGet&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #66d9ef&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_ObjectId&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// &amp;lt;/Custom additional code&amp;gt; &lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;get-many-objects&#34;&gt;Get Many Objects&lt;/h2&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;// Get and cast the client&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseSpeckleApiClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Client&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseSpeckleApiClient;&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Create a fresh converter if we don&amp;#39;t have one&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RhinoConverter();&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Set outputs&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;Response&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SpkObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObjects;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(myObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;RhObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter.ToNative(myObjects);&lt;/span&gt;


    &lt;span style=&#34;color: #f8f8f2&#34;&gt;PayloadObjectGetBulk&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myPayload&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PayloadObjectGetBulk()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Objects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ObjectIds&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;};&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;// Check if we have a new request: this is a bad way of doing it&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;// Quite inelegant, but here&amp;#39;s to hacks&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(_myPayload.ToJson()&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myPayload.ToJson())&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;_myPayload&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myPayload;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;myClient.ObjectGetBulkAsync(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;omit=displayValue&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myPayload).ContinueWith(tres&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;

        &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tres.Result;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse.Objects;&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;.Component.ExpireSolution(&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color: #75715e&#34;&gt;// &amp;lt;Custom additional code&amp;gt; &lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;RhinoConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myConverter&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;List&amp;lt;SpeckleObject&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;ResponseGetObjects&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myResponse&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color: #f8f8f2&#34;&gt;PayloadObjectGetBulk&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_myPayload&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;new&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PayloadObjectGetBulk();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h2 id=&#34;going-further&#34;&gt;Going Further:&lt;/h2&gt;

&lt;p&gt;You can basically prototype/play with any methods that talk with the SpeckleApi:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;updating objects&lt;/li&gt;
&lt;li&gt;creating, updating, diffing and cloning streams&lt;/li&gt;
&lt;li&gt;adding layers to streams&lt;/li&gt;
&lt;li&gt;[&amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hope this wet your appetite.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Essential Data Models</title>
      <link>https://speckle.works/doc/coredatamodels/</link>
      <pubDate>Tue, 03 Oct 2017 11:42:56 +0100</pubDate>
      
      <guid>https://speckle.works/doc/coredatamodels/</guid>
      <description>

&lt;p&gt;The following goes hand in hand with the Schema section in the &lt;a href=&#34;https://speckleworks.github.io/SpeckleOpenApi/#schemas&#34;&gt;Speckle Api Docs&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;data-models&#34;&gt;Data Models&lt;/h1&gt;

&lt;p&gt;Speckle operates with two core data models, Objects and Streams. Alongside, we have UserAppClients (or Clients) and Users, but we will not cover them in this document.&lt;/p&gt;

&lt;h1 id=&#34;streams&#34;&gt;Streams&lt;/h1&gt;

&lt;h2 id=&#34;basics&#34;&gt;Basics&lt;/h2&gt;

&lt;p&gt;Streams (DataStreams) are just a collection of objects. A stream has three important fields:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the streamId string&lt;/li&gt;
&lt;li&gt;the objects array&lt;/li&gt;
&lt;li&gt;the layers array&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;strong&gt;streamId&lt;/strong&gt; is a short, url friendly, id that the stream is known by. It is also the name of the websocket &amp;ldquo;room&amp;rdquo; where all announcements about the state/mutations of this stream happen.&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;objects array&lt;/strong&gt; is an ordered list of SpeckleObjects _ids (see below for a description of objects in speckle). It may contain duplicates and traces of nuts.&lt;/p&gt;

&lt;p&gt;The optional layer array holds in a list of &lt;a href=&#34;https://speckleworks.github.io/SpeckleOpenApi/#specklelayer&#34;&gt;_SpeckleLayer_s&lt;/a&gt;.
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;// Voila a layer:&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;guid&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;string&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;orderIndex&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;startIndex&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;objectCount&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;topology&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;0;0;0;0-2 0;0;0;1-2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
  &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;//...&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;A layer&amp;rsquo;s startIndex and objectCount determine, against the stream&amp;rsquo;s object list, which object is on what layer.&lt;/p&gt;

&lt;h2 id=&#34;inheritance-versioning&#34;&gt;Inheritance &amp;amp; Versioning&lt;/h2&gt;

&lt;p&gt;Furthermore, streams may have a parent and an array of children. These enable two versioning models, for example:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A Sender Client (A) can save its current state as an option (A1). Subsequent updates will continue to be logged at A, and not against his children (A1, A2, &amp;hellip; An).&lt;/li&gt;
&lt;li&gt;A Sender Client (A) can clone himself into (A1) and log all subsequent updates to the newly created stream (A1).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In both scenarios, Stream A will have A1 in his children array, and A1 will have A as his parent.&lt;/p&gt;

&lt;p&gt;The corresponding API method is &lt;a href=&#34;https://speckleworks.github.io/SpeckleOpenApi/#streamclone&#34;&gt;StreamClone&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;objects&#34;&gt;Objects&lt;/h1&gt;

&lt;p&gt;Speckle objects all inherit from a base model, the SpeckleObject, which enforces a few default properties, namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Type&lt;/li&gt;
&lt;li&gt;Hash&lt;/li&gt;
&lt;li&gt;ApplicationId&lt;/li&gt;
&lt;li&gt;Properties
[&amp;hellip;]&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;object-type&#34;&gt;Object Type&lt;/h2&gt;

&lt;p&gt;The type field is the discriminator. It determines which subtype the specific instance is part of. It is enforced on the schema model on the server side, and currently it has to be part of the following enum:&lt;/p&gt;

&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;String,&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;enum&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Null&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Boolean&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Number&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;String&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Interval&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Interval2d&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Point&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Vector&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Plane&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Line&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Rectangle&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Circle&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Box&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Polyline&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Curve&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Mesh&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Brep&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Annotation&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Null&amp;#39;&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2 id=&#34;object-hash&#34;&gt;Object Hash&lt;/h2&gt;

&lt;p&gt;The hash is a unique value, generated by the application specific converter, that is unique to that object. This hash is extremely important to be correctly generated, as objects with the same hash will not be saved twice in the database.&lt;/p&gt;

&lt;p&gt;There is also a secondary hash, called GeometryHash, which describes just the geometry values of that specific object, without its properties field, which is described below.&lt;/p&gt;

&lt;h2 id=&#34;object-properties&#34;&gt;Object Properties&lt;/h2&gt;

&lt;p&gt;The properties field of an object is essentially implemented as a key value store of type &lt;code&gt;Dictionary&amp;lt;string, object&amp;gt;&lt;/code&gt;, where you define the keys as well as their values.&lt;/p&gt;

&lt;p&gt;Anything can go in there, essentially describing your own data format on the go. Here&amp;rsquo;s a super small example of a truncated SpeckleBrep:
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;speckleObject&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;_id&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;59c0e81f0385f87cf2362cfc&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Area&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;9424.77796076938&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Volume&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;141371.66999307554&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;FacadeLayer&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SW01-32&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Planarity&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0.32&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Costing&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;base&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;150&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;unit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;$/m2&amp;quot;&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
      &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Centroid&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Point&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;3.088012320065082&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;7.645600799106988&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;e&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #ae81ff&#34;&gt;24.999999999999993&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hash&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;1849b3754e13fba0095274e51f779ba3&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;geometryHash&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Point.9153ad925fa1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;properties&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;nestedValue&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;otherNestedValue&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;25.43&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
          &lt;span style=&#34;color: #75715e&#34;&gt;// ...&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
      &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
      &lt;span style=&#34;color: #75715e&#34;&gt;// ...&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;hash&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;3d67fd7575ada47d73eb649113724399&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Brep&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h4 id=&#34;how-do-you-create-all-these-amazing-properties-i-hear-you-asking-well-wait-no-longer-read-on-here-doc-userdatautils&#34;&gt;How do you create all these amazing properties, I hear you asking? Well wait no longer, &lt;a href=&#34;https://speckle.works/doc/userdatautils&#34;&gt;read on here&lt;/a&gt;!&lt;/h4&gt;

&lt;p&gt;Some things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;You can have SpeckleObjects inside SpeckleObjects: the Centroid is actually a SpecklePoint.&lt;/li&gt;
&lt;li&gt;Nested properties: you are not restricted to a flat structure.&lt;/li&gt;
&lt;li&gt;You can query the API after these properties, so you can, with no effort, get things like &lt;code&gt;type=Polyline &amp;amp; Area&amp;gt;20 &amp;amp; Area &amp;lt; 100 &amp;amp; Level = 4.02 &amp;amp;sort = Area.&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s a live query example:&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://s003.speckle.works/api/streams/S1GUSjojW/objects?type=Circle&amp;amp;radius%3E10&amp;amp;radius%3C14&amp;amp;fields=type,radius,normal.value&#34;&gt;https://s003.speckle.works/api/streams/S1GUSjojW/objects?type=Circle&amp;amp;radius&amp;gt;10&amp;amp;radius&amp;lt;14&amp;amp;fields=type,radius,normal.value&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Notice the everything after the &lt;code&gt;?&lt;/code&gt; sign: that&amp;rsquo;s a query:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Object type should be &lt;em&gt;Circle&lt;/em&gt;.&lt;/li&gt;
&lt;li&gt;Radius should be &amp;gt; 10 and &amp;lt; 14&lt;/li&gt;
&lt;li&gt;Return only the &lt;em&gt;type, radius&lt;/em&gt; and &lt;em&gt;normal.value&lt;/em&gt; fields&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More about queries (and how they&amp;rsquo;re useful) in a different tutorial. That should wrap it up for this one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Deploying a Speckle Server</title>
      <link>https://speckle.works/doc/deployaserver/</link>
      <pubDate>Mon, 04 Sep 2017 11:42:56 +0100</pubDate>
      
      <guid>https://speckle.works/doc/deployaserver/</guid>
      <description>

&lt;p&gt;Please note: this is a quite insecure way of deploying the speckle server. It is, nevertheless, fast and gives a quick satisfaction :) You can follow this tutorial for a local install just as well; just skip to part 3 (install mongo).&lt;/p&gt;

&lt;h1 id=&#34;step-1-setup-on-digitalocean-https-m-do-co-c-947a2b5d7dc1&#34;&gt;Step 1: Setup on &lt;a href=&#34;https://m.do.co/c/947a2b5d7dc1&#34;&gt;DigitalOcean&lt;/a&gt;*&lt;/h1&gt;

&lt;p&gt;Go to &lt;a href=&#34;https://m.do.co/c/947a2b5d7dc1&#34;&gt;digitalocean.com&lt;/a&gt;* and create a VM running Ubuntu 16.04.3. Choose a region that&amp;rsquo;s convenient for you.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/do-1.png&#34; alt=&#34;do&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt; &lt;em&gt;* Affliate link. You get $10 free!&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;h1 id=&#34;step-2-ssh-ing&#34;&gt;Step 2: SSH&amp;rsquo;ing&lt;/h1&gt;

&lt;p&gt;Now that we have a VM, note down its IP address. We are ready to access it via the command line and proceed with the following steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;On OSX or equivalents: &lt;code&gt;ssh root@dropletip&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;On windows, you will need to use &lt;a href=&#34;http://www.putty.org/&#34;&gt;PuTTY&lt;/a&gt; or equivalents.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For a thorough setup, follow this &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/initial-server-setup-with-ubuntu-16-04&#34;&gt;digital ocean tutorial&lt;/a&gt; on how to setup your server. Security is not the focus of this tutorial, nevertheless, it &lt;em&gt;is rather important&lt;/em&gt; to follow best practices.&lt;/p&gt;

&lt;p&gt;For the purposes of this tutorial, we&amp;rsquo;re going to continue with the &lt;code&gt;root&lt;/code&gt; user. Please be aware this is not a good practice.&lt;/p&gt;

&lt;h1 id=&#34;step-3-install-mongo&#34;&gt;Step 3: Install Mongo&lt;/h1&gt;

&lt;p&gt;To install mongodb, there&amp;rsquo;s a &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-16-04&#34;&gt;handy tutorial over on digital ocean&lt;/a&gt; that guides you through the process.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Please note, do not allow external access.&lt;/strong&gt; We work under the assumption that this is a self-contained VM. Any access to the database will be through either ssh or the server.&lt;/p&gt;

&lt;h1 id=&#34;step-5-install-nodejs&#34;&gt;Step 5: Install NodeJS&lt;/h1&gt;

&lt;p&gt;Install node using nvm, which stands for &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;Node Version Manager&lt;/a&gt;. It will make your life easier when you&amp;rsquo;ll want to upgrade or switch versions. Follow their &lt;a href=&#34;https://github.com/creationix/nvm#installation&#34;&gt;instructions&lt;/a&gt;, or:&lt;/p&gt;

&lt;p&gt;Run this command in the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.5/install.sh | bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will copy the latest install script for nodejs and then execute it.&lt;/p&gt;

&lt;p&gt;Check that it worked: &lt;code&gt;nvm ls-remote&lt;/code&gt;. If you get an error, simply close the terminal and login in again.&lt;/p&gt;

&lt;p&gt;Install node 8.5.0 or later: &lt;code&gt;nvm install 8.5.0&lt;/code&gt;. Speckle Server has been known to run on earlier versions too - but you never know!&lt;/p&gt;

&lt;p&gt;Check that you have completed the install by testing node: &lt;code&gt;node -v&lt;/code&gt; should now output the version you&amp;rsquo;ve selected to install.&lt;/p&gt;

&lt;h1 id=&#34;step-6-clone-the-speckle-server-repo&#34;&gt;Step 6: Clone the Speckle Server repo&lt;/h1&gt;

&lt;p&gt;Clone the Speckle Server repository into a folder of your choice.
First:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ~/Apps
cd ~/Apps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then grab the latest dev release:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/speckleworks/SpeckleServer.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Afterwards, let&amp;rsquo;s install the node dependecies:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd SpeckleServer
npm install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To see that things are working, let&amp;rsquo;s run the application: &lt;code&gt;node server.js&lt;/code&gt;. It should, by default, work! Note though, that you won&amp;rsquo;t be able to access it form outside the server; there&amp;rsquo;s a few extra steps going for that to happen.&lt;/p&gt;

&lt;h1 id=&#34;step-7-blast-off&#34;&gt;Step 7: Blast off&lt;/h1&gt;

&lt;p&gt;If you don&amp;rsquo;t have a domain name, and just want to use speckle out of the box, follow the following steps to edit the &lt;code&gt;config.js&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Edit the config file using nano: &lt;code&gt;nano config.js&lt;/code&gt;. Change the following according to your circumstances:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change the default port to &lt;code&gt;80&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Change the rest api url to your droplet&amp;rsquo;s ip address.&lt;/li&gt;
&lt;li&gt;Change the ws url to your droplet&amp;rsquo;s ip address.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Optionally, change your server name too to something that it will distinguish it from others, i.e. &amp;ldquo;Dimitrie&amp;rsquo;s Amazing Server&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/nano-droplet.png&#34; alt=&#34;nano&#34; /&gt;&lt;/p&gt;

&lt;p&gt;To save your changes with nano, press &lt;em&gt;ctrl + x&lt;/em&gt;, then &lt;em&gt;y&lt;/em&gt; and hit &lt;em&gt;enter&lt;/em&gt;. We can now run the speckle server and hopefully all will be well!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node server.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you now head over to your droplet&amp;rsquo;s ip adress in a browser, you should be be seeing the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/serverblank.png&#34; alt=&#34;server blank&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, the address bar should read &lt;em&gt;&lt;a href=&#34;http://YOURDROPLETIP&#34;&gt;http://YOURDROPLETIP&lt;/a&gt;&lt;/em&gt;. If you see that, all works!&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;re ready to play with your grasshopper components and start sending data around. Enjoy!&lt;/p&gt;

&lt;h1 id=&#34;future-steps&#34;&gt;Future steps&lt;/h1&gt;

&lt;p&gt;Please remember that this is an insecure install. Furthermore, because you&amp;rsquo;re running without a SSL certificate, in some cases the websockets are blocked. There might also be issues with gzip compression too.&lt;/p&gt;

&lt;p&gt;Ideally you would run the Speckle Server under a proxy like NGINX. Here are a few extra steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Secure your server properly.&lt;/li&gt;
&lt;li&gt;Get a domain name and point its DNS records to your VM&amp;rsquo;s ip.&lt;/li&gt;
&lt;li&gt;Setup nginx.&lt;/li&gt;
&lt;li&gt;Don&amp;rsquo;t forget UFW (firewall).&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Speckle Model Viewer</title>
      <link>https://speckle.works/doc/onlineviewer/</link>
      <pubDate>Mon, 05 Jun 2017 13:26:18 +0100</pubDate>
      
      <guid>https://speckle.works/doc/onlineviewer/</guid>
      <description>

&lt;h1 id=&#34;examples&#34;&gt;Examples&lt;/h1&gt;

&lt;div style=&#39;text-align: center; width: 100%;&#39;&gt;
&lt;a href=&#34;https://app.speckle.works/viewer/?rkp4LVi-b&#34; style=&#39;margin-left: 2px; text-decoration: none; border: 0; &#39;&gt;&lt;img style=&#39;width: 47%;&#39; src=&#34;https://speckle.works/img/onlineviewer/ex1@0.75x.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://app.speckle.works/viewer/?SJQTff1fW,Hyl7AQ1GZ&#34; style=&#39;margin-left: 2px; text-decoration: none; border: 0; &#39;&gt;&lt;img style=&#39;width: 47%;&#39; src=&#34;https://speckle.works/img/onlineviewer/ex3@0.75x.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
&lt;br&gt;
&lt;br&gt;
&lt;a href=&#34;https://app.speckle.works/viewer/?H1YX_M4GZ,Sk8rGmNfb&#34; style=&#39;margin-left: 2px; text-decoration: none; border: 0; &#39;&gt;&lt;img style=&#39;width: 47%;&#39; src=&#34;https://speckle.works/img/onlineviewer/ex2@0.75x.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
&lt;a href=&#34;https://app.speckle.works/viewer/?Hk8lgC8W-,BJqlzkPZb&#34; style=&#39;margin-left: 2px; text-decoration: none; border: 0; &#39;&gt;&lt;img style=&#39;width: 47%;&#39; src=&#34;https://speckle.works/img/onlineviewer/ex4@0.75x.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
&lt;/div&gt;

&lt;!-- 
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;iframe src=&#34;https://app.speckle.works/viewer/?H1YX_M4GZ,Sk8rGmNfb&#34; style=&#34;width:80%;height:600px;left:10%;position:relative;&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
&lt;div class=&#34;grid section-block article-block&#34;&gt;
&lt;div class=&#34;row&#34;&gt;
&lt;div class=&#34;col col-10-of-12 col-m4-of-4 article&#34;&gt; --&gt;

&lt;h1 id=&#34;viewing-streams&#34;&gt;Viewing Streams&lt;/h1&gt;

&lt;p&gt;Any stream that&amp;rsquo;s sent through speckle can be viewed online.&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s quite simple. Just head over to &lt;a href=&#34;https://app.speckle.works/viewer/&#34;&gt;https://app.speckle.works/viewer/&lt;/a&gt; and click the red plus button in the corner.&lt;/p&gt;

&lt;p&gt;For the hackers, just appednd your streamIds to the url after a question mark, like this: &lt;a href=&#34;https://app.speckle.works/viewer/?H1YX_M4GZ,Sk8rGmNfb&#34;&gt;https://app.speckle.works/viewer/?H1YX_M4GZ,Sk8rGmNfb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;You can log in or just continue as a guest. Logging in allows you to save views and change layer materials.&lt;/p&gt;

&lt;h2&gt;Overlaying streams&lt;/h2&gt;

&lt;p&gt;As you can see, you are not restricted to the number of streams you can view at the same time. This is to encourage modularity - so split up your models in whatever pieces makes sense.&lt;/p&gt;

&lt;h1 id=&#34;feature-data-richness&#34;&gt;Feature: Data Richness&lt;/h1&gt;

&lt;p&gt;My favourite is viewing object user data. You have attached some custom user data in grasshopper, using the &lt;a href=&#34;https://speckle.works/doc/userdatautils/&#34;&gt;Speckle Custom User Data plugin&lt;/a&gt;, it will be displayed in the browser if you click on the respective object.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/onlineviewer/userdata.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There is a planned &amp;ldquo;tabular&amp;rdquo; interface that will help you export directly csvs (or json)&lt;/p&gt;

&lt;h1 id=&#34;feature-layers-and-materials&#34;&gt;Feature: Layers and Materials&lt;/h1&gt;

&lt;p&gt;Change colours, edge display, wireframes, transparency. PS: You can&amp;rsquo;t do that for coloured meshes. They use their vertex colours, so you can&amp;rsquo;t assign them an absolute colour.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/onlineviewer/layers.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;h1 id=&#34;feature-comments&#34;&gt;Feature: Comments&lt;/h1&gt;

&lt;p&gt;If you&amp;rsquo;re logged in you can leave annoying view-linked comments. Clicking on one will &lt;em&gt;swoooosh&lt;/em&gt; you back to that view.
&lt;img src=&#34;https://speckle.works/img/onlineviewer/swoosh.gif&#34; alt=&#34;img&#34; /&gt;
You can swoosh swoosh a lot. It&amp;rsquo;s great fun.&lt;/p&gt;

&lt;h1 id=&#34;deployment&#34;&gt;Deployment&lt;/h1&gt;

&lt;p&gt;Head over to github: &lt;a href=&#34;https://github.com/didimitrie/SpeckleViewer&#34;&gt;https://github.com/didimitrie/SpeckleViewer&lt;/a&gt; and clone the repo. You will need to modify the ./dist/config.js file to fit your deployment details. It&amp;rsquo;s rather self-descriptive, it just exports a global object with info:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var SpkAppConfig = {
  serverUrl: &#39;http://localhost:8080&#39;,
  allowGuestAccess: true,
  logoUrl: &#39;https://company.png&#39;
}

window.SpkAppConfig = SpkAppConfig
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It&amp;rsquo;s rather important to serve things to &lt;code&gt;https&lt;/code&gt; and make sure the server is allowing &lt;code&gt;cors&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;bugs&#34;&gt;Bugs&lt;/h1&gt;

&lt;p&gt;Please file any issues you encounter in the github repo:
Head over to github: &lt;a href=&#34;https://github.com/didimitrie/SpeckleViewer/issues&#34;&gt;https://github.com/didimitrie/SpeckleViewer/issues&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speckle User Data Utils</title>
      <link>https://speckle.works/doc/userdatautils/</link>
      <pubDate>Tue, 04 Apr 2017 11:42:56 +0100</pubDate>
      
      <guid>https://speckle.works/doc/userdatautils/</guid>
      <description>

&lt;h1&gt;Before you begin:&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Download the custom user data utils from here: &lt;a href=&#39;https://github.com/didimitrie/SpeckleUserDataUtils/tree/dev/releases&#39;&gt;https://github.com/didimitrie/SpeckleUserDataUtils/tree/dev/releases&lt;/a&gt;. They are no longer bundled with the main Speckle Sender Receiver distribution, sorry!&lt;/strong&gt;
&lt;/p&gt;

&lt;p&gt;To use with Speckle, make sure you go through &lt;a href=&#34;https://speckle.works/doc/grasshopperinstall/&#34;&gt;the installation guide.&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;introduction&#34;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;The Speckle User Data Utilities deliver the &amp;ldquo;Rich&amp;rdquo; in the &amp;ldquo;Data Rich Design&amp;rdquo;. Similar to &lt;a href=&#34;http://www.elefront.info/&#34;&gt;Elefront&lt;/a&gt; and other plugins that I might not know of, they allow you to easily define and attach a set of properties to geometry objects.&lt;/p&gt;

&lt;p&gt;Objects with attached user data, if baked, will not loose it. As such, you can reference them again in Grasshopper and you will be able to retrieve that user data.&lt;/p&gt;

&lt;p&gt;Furthermore, you can even send them through the Speckle Sender! When they come out on the other side, in a Speckle Receiver, they will have said user data attached to them.&lt;/p&gt;

&lt;p&gt;In the background they work with Rhino&amp;rsquo;s &lt;a href=&#34;http://developer.rhino3d.com/api/RhinoCommonWin/html/T_Rhino_Collections_ArchivableDictionary.htm&#34;&gt;ArchivableDictionary&lt;/a&gt; class.&lt;/p&gt;

&lt;p&gt;They are extremely simple to use.&lt;/p&gt;

&lt;h1 id=&#34;creating-custom-properties&#34;&gt;Creating Custom Properties&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/userdata/create.gif&#34; alt=&#34;spk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The takeaways:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the input parameter name becomes the object&amp;rsquo;s key&lt;/li&gt;
&lt;li&gt;the value of the input parameter becomes the object&amp;rsquo;s value&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;nested-properties-turtles-all-the-way-down&#34;&gt;Nested Properties: Turtles All The Way Down&lt;/h1&gt;

&lt;p&gt;You can store three types of data: Numbers, Strings and &lt;strong&gt;Other Custom Properties.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/userdata/turtles.gif&#34; alt=&#34;spk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This allows you to easily create nested properties and store object information in logical groups that you can create to suit your specific project needs. It&amp;rsquo;s up to you.&lt;/p&gt;

&lt;h1 id=&#34;attaching-properties-to-geometry&#34;&gt;Attaching Properties To Geometry&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/userdata/AttachUserData.png&#34; alt=&#34;spk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;strong&gt;Set User Data&lt;/strong&gt; component, just plug in the objects you want attach data to and created properties.&lt;/p&gt;

&lt;h3&gt;Baking User Data&lt;/h3&gt;

&lt;p&gt;If you bake objects in Rhino with user data attached to them it will be serialised: when you reference them back into Grasshopper, you will be able to extract that user data.&lt;/p&gt;

&lt;h1 id=&#34;getting-properties-from-geometry&#34;&gt;Getting Properties From Geometry&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/userdata/GetUD.png&#34; alt=&#34;spk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Using the &lt;strong&gt;Get User Data&lt;/strong&gt; component, plug in the objects you want to extract the user data from and get out the dictionaries.&lt;/p&gt;

&lt;p&gt;Once you got the User Data, use the &lt;strong&gt;Expand User Data&lt;/strong&gt; to, well, get the properties out again. Note that if you use nested properties you will need to &lt;strong&gt;Expand User Data&lt;/strong&gt; the respective nested property too.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/userdata/filter.png&#34; alt=&#34;spk&#34; /&gt;
You can now filter your objects based on their properties using standard Grasshopper functionality.&lt;/p&gt;

&lt;h1 id=&#34;exporting&#34;&gt;Exporting&lt;/h1&gt;

&lt;p&gt;You have two options to export them: JSON and CSV.&lt;/p&gt;

&lt;h3&gt;JSON Strings&lt;/h3&gt;

&lt;p&gt;The most faithful representation. Straightforward, and nothing complicated:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
  {
    &amp;quot;type&amp;quot;: &amp;quot;side_panel&amp;quot;,
    &amp;quot;centre&amp;quot;: &amp;quot;0.0, -8.0, 20.0&amp;quot;,
    &amp;quot;dist_attractor&amp;quot;: 13.83970326936719,
    &amp;quot;scale_factor&amp;quot;: 0.53810463458171542,
    &amp;quot;normal_vector&amp;quot;: {
      &amp;quot;x&amp;quot;: -1.4791141972893965E-31,
      ...
    }
  },
  {
    &amp;quot;type&amp;quot;: &amp;quot;hex_panel&amp;quot;,
    &amp;quot;scale_factor&amp;quot;: 0.38469562983428035,
    &amp;quot;material&amp;quot;: &amp;quot;reddish-like_glossy&amp;quot;,
    &amp;quot;otherProperty&amp;quot;: { ... }
  },
  {...}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that you always get out an array of json objects.&lt;/p&gt;

&lt;h3&gt;CSV&lt;/h3&gt;

&lt;p&gt;When exporting to CSV, the JSON structure is essentially &amp;ldquo;flattened&amp;rdquo;. First row will always contain all the property keys. Following there&amp;rsquo;s one row per object, with null values inserted where they don&amp;rsquo;t correspond. Let&amp;rsquo;s say you have the following UDs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[
    {
        X: 42,
        Y: {
            nested_1: &amp;quot;hello&amp;quot;,
            nested_2: &amp;quot;world&amp;quot;
        }
    },
    {
        random_prop: 123
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will result in the following csv file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ROW 0: X, Y.nested_1, Y.nested_2, random_prop
ROW 1: 42, hello, world, null
ROW 2: null, null, null, 123
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;baking-and-referencing&#34;&gt;Baking and Referencing&lt;/h1&gt;

&lt;p&gt;As mentioned above, if you bake your smart objects into Rhino proper, you will be able to retrieve the user data when you reference them again in grasshopper.&lt;/p&gt;

&lt;h1 id=&#34;sending-via-speckle&#34;&gt;Sending via Speckle&lt;/h1&gt;

&lt;p&gt;Objects that have user data attached to them can be sent through the Speckle Sender without loosing their &amp;ldquo;smartness&amp;rdquo;: the properties will remain attached to the object, and in the near future, you will be even able to directly query the Speckle Server based on them. Neat, no?&lt;/p&gt;

&lt;p&gt;For a tutorial on how to send data via Speckle, &lt;a href=&#34;https://speckle.works/doc/senderreceiver&#34;&gt;check this tutorial out!&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Speckle Sender &amp; Receiver</title>
      <link>https://speckle.works/doc/senderreceiver/</link>
      <pubDate>Mon, 03 Apr 2017 19:14:24 +0100</pubDate>
      
      <guid>https://speckle.works/doc/senderreceiver/</guid>
      <description>

&lt;h1&gt;Before you begin:&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Make sure you go through &lt;a href=&#34;https://speckle.works/doc/grasshopperinstall/&#34;&gt;the installation guide.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sending data back and forth is also much more fun when having access to a second human that you can actually send data to, or receive data from.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;1-speckle-sender&#34;&gt;1. Speckle Sender&lt;/h1&gt;

&lt;p&gt;The Speckle Sender is one of the two basic Speckle components. What it does is very simple: it sends data to other Speckle Receivers.&lt;/p&gt;

&lt;h2&gt;Instantiation:&lt;/h2&gt;

&lt;p&gt;Once you create a Speckle Sender, a dialog box will ask you which Speckle Account to use. If you&amp;rsquo;ve followed the installation guide, you already should have an existing Speckle Account.&lt;/p&gt;

&lt;p&gt;Double click on the one you want to use, and voila! you get a rather boring grasshopper component.&lt;/p&gt;

&lt;h2&gt;Adding inputs:&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/sendreceive/zui.gif&#34; alt=&#34;spk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;This component uses the &lt;strong&gt;Grasshopper ZUI&lt;/strong&gt;. Zoom in and click on the plus button on the input parameter side. You can add as many input parameters as you like, and give them any name you want.&lt;/p&gt;

&lt;h2&gt;Update Frequency:&lt;/h2&gt;

&lt;p&gt;There are two main methods/events:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Data Send Events (geometry + metadata): debounced at &lt;code&gt;1000ms&lt;/code&gt; (1s)&lt;/li&gt;
&lt;li&gt;MetaData Send Events (metadata): debounced at &lt;code&gt;500ms&lt;/code&gt; (.5s)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Size Limits &amp; How to Overcome Them:&lt;/h2&gt;

&lt;p&gt;The payload size of any given event is limited to 3mb. If you exceed this much, simply create another Speckle Sender.&lt;/p&gt;

&lt;h1 id=&#34;2-speckle-receiver&#34;&gt;2. Speckle Receiver&lt;/h1&gt;

&lt;p&gt;The Speckle Receiver listens for updates at a specific stream id. It dynamically recreates the structure of the sender.&lt;/p&gt;

&lt;h2&gt;Instantiation:&lt;/h2&gt;

&lt;p&gt;Same initial instructions apply as for the Speckle Sender. Once on the canvas, set the &lt;code&gt;id&lt;/code&gt; input parameter to the one you want to listen to.&lt;/p&gt;

&lt;p&gt;Please bear in mind one important aspect: stream ids are unique for each Speckle Server. As such, if you create sender with a specific account, a receiver can only listen to it if it is using the same account.&lt;/p&gt;

&lt;h2&gt;Off-line sender?&lt;/h2&gt;

&lt;p&gt;No problem. The receiver will pull the latest update from the Speckle Server.&lt;/p&gt;

&lt;h1 id=&#34;3-name-sync&#34;&gt;3. Name Sync&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/sendreceive/namesync.gif&#34; alt=&#34;spk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Changing the Sender Component&amp;rsquo;s name will change the name of the stream. This can be rather informative for large projects.&lt;/p&gt;

&lt;h1 id=&#34;4-inputs-outputs-sync&#34;&gt;4. Inputs &amp;amp; Outputs Sync&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/sendreceive/layersync.gif&#34; alt=&#34;spk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;We are treating input parameters as &amp;ldquo;layers&amp;rdquo;. Add, remove, change their names! All the Speckle Receivers will be updated with the new parameters, as outputs. Name them!&lt;/p&gt;

&lt;h1 id=&#34;5-structure-trees&#34;&gt;5. Structure &amp;amp; Trees&lt;/h1&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/sendreceive/structure.gif&#34; alt=&#34;spk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;In Grasshopper, the Speckle Senders and Receivers maintain data structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;single item -&amp;gt; single item&lt;/li&gt;
&lt;li&gt;list -&amp;gt; list&lt;/li&gt;
&lt;li&gt;tree -&amp;gt; tree&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This covers the main functionality of the speckle senders and receiver components for grasshopper. There&amp;rsquo;s a few more secrets in store (like history), but they&amp;rsquo;re yet to be properly implemented.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Grasshopper Setup</title>
      <link>https://speckle.works/doc/grasshopperinstall/</link>
      <pubDate>Tue, 28 Mar 2017 13:26:18 +0100</pubDate>
      
      <guid>https://speckle.works/doc/grasshopperinstall/</guid>
      <description>

&lt;h1 id=&#34;step-0-what-s-in-the-box&#34;&gt;Step 0: What&amp;rsquo;s in the box&lt;/h1&gt;

&lt;p&gt;The releases contain both the Speckle Grasshopper Clients as well as the Speckle User Data Utils (more to come).&lt;/p&gt;

&lt;h1 id=&#34;step-1-download-the-latest-version&#34;&gt;Step 1: Download the latest version.&lt;/h1&gt;

&lt;p&gt;Head over to &lt;a href=&#34;https://github.com/speckleworks/SpeckleGrasshopper/releases&#34;&gt;Speckle Grasshopper&amp;rsquo;s release page&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to grab a specific version, feel free. Nevertheless, it usually best to download the latest version (ie highest release number).&lt;/p&gt;

&lt;h1 id=&#34;step-2-installation&#34;&gt;Step 2: Installation&lt;/h1&gt;

&lt;p&gt;Close Rhino and Grasshopper if you have them running by any chance.&lt;/p&gt;

&lt;p&gt;Unzip the downloaded zip and copy and paste the two folders in the Grasshopper components folder:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%appdata%\Roaming\Grasshopper\Libraries
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Make sure that all &lt;em&gt;dll&lt;/em&gt; and &lt;em&gt;gha&lt;/em&gt; files are &lt;strong&gt;not&lt;/strong&gt; in the root folder but in their own folder called &lt;em&gt;SpeckleSendReceive&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;step-3-create-your-first-account&#34;&gt;Step 3: Create Your First Account&lt;/h1&gt;

&lt;p&gt;Fire Rhino and Grasshopper up. The Speckle Components should appear in their own tab, called &lt;code&gt;Speckle&lt;/code&gt;. Wow! Smooth sailing so far.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/ghinstall/gh-new.png&#34; alt=&#34;spk&#34; /&gt;&lt;/p&gt;

&lt;p&gt;When you will first drag a Speckle Sender or Speckle Receiver component to the canvas, a dialog will ask you to create an account (or use an existing one).&lt;/p&gt;

&lt;p&gt;Since I&amp;rsquo;m assuming you are a new user, let&amp;rsquo;s go ahead and make a new one:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://speckle.works/img/ghinstall/newaccount.png&#34; alt=&#34;spk&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Server Url: use &lt;code&gt;https://s003.speckle.works/api&lt;/code&gt; or, if you &lt;a href=&#34;https://speckle.works/doc/deployaserver/&#34;&gt;deployed your own&lt;/a&gt;, your ip/url address.&lt;/li&gt;
&lt;li&gt;Email: your email address.&lt;/li&gt;
&lt;li&gt;Password: your password.&lt;/li&gt;
&lt;li&gt;Confirm: confirm your password.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Click register, and voila! You should be up and running: you can now send data between clients connected to the s003.speckle.works server. Get your friends to join in the fun ð&lt;/p&gt;

&lt;h1 id=&#34;next-steps&#34;&gt;Next steps&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Read about the &lt;a href=&#34;https://speckle.works/doc/senderreceiver/&#34;&gt;Sender and Receiver components&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Check out the super powerful &lt;a href=&#34;https://speckle.works/doc/userdatautils/&#34;&gt;User Data Utils&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Take a break&lt;/li&gt;
&lt;li&gt;Ask questions on &lt;a href=&#34;https://slacker.speckle.works&#34;&gt;Slack&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>